linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3))
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
?predict
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
mtcars
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=2.620)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
help(predict.lm)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(x ~ y) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=mean(x))
predict(linearmod, newdata, interval = ("confidence"))
newdata
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("confidence"))
newdata
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("prediction"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=2)
predict(linearmod, newdata, interval = ("confidence"))
help(predict.lm)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=2)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=x*2)
predict(linearmod, newdata, interval = ("confidence"))
x = mtcars$wt
y = mtcars$mpg/2
linearmod = lm(y ~ x) ##outcome/predictor
predict(linearmod, interval = ("confidence"))
hist(linearmod)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
summary(linearmod)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
confint(linearmod, x, level=0.95)
confint(linearmod, x*2, level=0.95)
2 * confint(linearmod, x, level=0.95)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=3)
predict(linearmod, newdata, interval = ("prediction"))
x = mtcars$wt
y = mtcars$mpg/2
linearmod = lm(y ~ x) ##outcome/predictor
2 * confint(linearmod, x, level=0.95)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
2 * confint(linearmod, x, level=0.95)
summary(linearmod)
x = mtcars$wt
y = mtcars$mpg*2
linearmod = lm(y ~ x) ##outcome/predictor
summary(linearmod)
##The 95% confidence interval for the slope is the estimated coefficient
##(-5.3445) ± two standard errors (0.5591).
Multiply the confidence interval by
confint(linearmod, x, level=0.95)
summary(linearmod)
confint(linearmod, x, level=0.95)
summary(linearmod)
confint(linearmod, x, level=0.95)
thingo = confint(linearmod, x, level=0.95)
str(thingo)
confint(linearmod, x, level=0.95)[1]
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=mean(x))
predict(linearmod, newdata, interval = ("confidence"))
confint(linearmod, x, level=0.95)[1]
summary(linearmod)
mtcars
x = mtcars$wt*100
x
x = mtcars$wt*100
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
summary(linearmod)
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
summary(linearmod)
x = mtcars$wt
y = mtcars$mpg*2 ##double for short ton
linearmod = lm(y ~ x) ##outcome/predictor
summary(linearmod)
##The 95% confidence interval for the slope is the estimated coefficient
##(-10.689) ± two standard errors (1.118).
confint(linearmod, x, level=0.95)[1]
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
str(summary(linearmod))
summary(linearmod)
str(summary(linearmod))
summary(linearmod)$sigma
?anova
?anova.lm
anova(interceptonly, linearmod)
x = mtcars$wt
y = mtcars$mpg
interceptonly = lm(y ~ 1) ##intercept only model (representing total variation)
linearmod = lm(y ~ x) ##outcome/predictor
anova(interceptonly, linearmod)
1126.05/278.32
278.32/1126.05
modelcomp = anova(interceptonly, linearmod)
str(summary(modelcomp))
anova(interceptonly, linearmod)
str(summary(modelcomp))
modelcomp[3]
modelcomp[2]
summary(modelcomp)
modelcomp
modelcomp[2]
modelcomp[2,1]
modelcomp[2]
modelcomp[2][1]
str(modelcomp[2])
modelcomp[2]
modelcomp = anova(linearmod, interceptonly)
summary(modelcomp)
modelcomp[2]
278.32/1126.05
modelcomp = anova(linearmod, interceptonly)
str(summary(modelcomp))
summary(modelcomp)
modelcomp
modelcomp[2]
str(modelcomp[2])
278.32/1126.05
modelcomp[2]$RSS
modelcomp[2]$RSS[1]
modelcomp[2]
str(summary(modelcomp))
modelcomp
mtcars
?mtcars
mtcars$am["0"]
mtcars[which(mtcars$am == "0"),]
auto = mtcars[which(mtcars$am == "0"),]
manual = mtcars[which(mtcars$am == "1"),]
mtcars[which(mtcars$am == "1"),]
auto
manual
x = auto$am
y = auto$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=mean(x))
predict(linearmod, newdata, interval = ("confidence"))
body(predict.lm)
body(data.frame)
linearmod
x
y
x = mtcars$wt
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=mean(x))
predict(linearmod, newdata, interval = ("confidence"))
x
y
x = mtcars$am
y = mtcars$mpg
linearmod = lm(y ~ x) ##outcome/predictor
newdata = data.frame(x=mean(x))
predict(linearmod, newdata, interval = ("confidence"))
linearmod
summary(linearmod)
auto = mtcars[which(mtcars$am == "0"),]
manual = mtcars[which(mtcars$am == "1"),]
mean(auto$mpg)
mean(manual$mpg)
str(auto)
mean(auto$mpg)
mean(manual$mpg)
?var
var(auto$mpg)
var(manual$mpg)
cov(auto$mpg)
cov(manual$mpg)
cor(auto$mpg)
cor(manual$mpg)
var(auto$mpg)
var(manual$mpg)
manual
auto
var(auto$mpg)
var(manual$mpg)
manual
manual$mpg
var(auto$mpg)
mean(manual$mpg)
?scale
var(scale(auto$mpg))
var(scale(manual$mpg))
?sd
sd(auto$mpg)
sd(manual$mpg)
auto$mpg
hist(mean(auto$mpg))
var(auto$mpg)
var(manual$mpg)
auto$mpg - mean(auto$mpg)
var(auto$mpg - mean(auto$mpg))
var(manual$mpg - mean(manual$mpg))
manual$mpg - mean(manual$mpg)
?var
minauto = auto$mpg - mean(auto$mpg)
var(minauto)
auto$mpg
minauto
var(auto$mpg - mean(auto$mpg))
var(manual$mpg - mean(manual$mpg))
auto$mpg - mean(auto$mpg)
library(ggplot2)
g = ggplot(mtcars, aes(x = mpg, y = am),)
g = g + xlab("Mpg")
g = g + ylab("Transmission")
g
library(ggplot2)
g = ggplot(mtcars, aes(x = mpg, y = am),)
g = g + xlab("Mpg")
g = g + ylab("Transmission")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2 )
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2 )
g = g + geom_smooth(method = "lm", colour = "black")
g
g = ggplot(mtcars, aes(x = am, y = am ),)
g = g + xlab("Mpg")
g = g + ylab("Transmission")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2 )
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2 )
g = g + geom_smooth(method = "lm", colour = "black")
g
g = ggplot(mtcars, aes(x = am, y = mpg ),)
g = g + xlab("Mpg")
g = g + ylab("Transmission")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2 )
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2 )
g = g + geom_smooth(method = "lm", colour = "black")
g
g = g + xlab("Transmission")
g = g + ylab("MPG")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2 )
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2 )
g = g + geom_smooth(method = "lm", colour = "black")
g
g = ggplot(mtcars, aes(x = which(mtcars$am == "0"), y = mtcars[which(mtcars$am == "1") ),)
x = auto$mpg
y = manual$mpg
lm(y ~x)
lm(y ~ x)
x1 = auto$mpg
y1 = auto$am
x2 = manual$mpg
y2 = manual$am
linearauto = lm(y1 ~ x1) ##outcome/predictor
linearman = lm(y2 ~ x2) ##outcome/predictor
modelcomp = anova(linearauto, linearman)
modelcomp
data<-mtcars
str(data)
data <- mtcars
data$cyl <- factor(data$cyl)
data$am <- factor(data$am)
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
levels(data$am) <- c("automatic", "manual")
str(data)
data
mtcars$am = Transmission (0 = automatic, 1 = manual)
auto = mtcars[which(mtcars$am == "0"),]
manual = mtcars[which(mtcars$am == "1"),]
mean(auto$mpg)
mean(manual$mpg)
mtcars$cyl <- factor(data$cyl)
mtcars$am <- factor(data$am)
mtcars$gear <- factor(data$gear)
mtcars$carb <- factor(data$carb)
levels(mtcars$am) <- c("automatic", "manual")
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
levels(mtcars$am) <- c("automatic", "manual")
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
levels(mtcars$am) <- c("auto", "manual")
?mtcars
mtcars
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
levels(mtcars$am) <- c("auto", "manual")
mtcars
?mtcars
cors <- cor(mtcars$mpg,mtcars[,-1])
cor.tests <- sapply(mtcars[, -1], cor.test, mtcars$mpg)
alphas <- sapply(0:9, function(i){ cor.tests[i*9+3]} )
results <- rbind(cors, alphas)
rownames(results) <- c("corr", "p-value")
results
setwd("C:/Users/KOLeary/Documents/GitHub/RegressionModels")
library(datasets)
data(mtcars)
# Create factors for the categorial variables
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
cors <- cor(mtcars$mpg,mtcars[,-1])
cor.tests <- sapply(mtcars[, -1], cor.test, mtcars$mpg)
alphas <- sapply(0:9, function(i){ cor.tests[i*9+3]} )
results <- rbind(cors, alphas)
rownames(results) <- c("corr", "p-value")
results
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3))
summary(lm(mpg ~ . , data = mtcars))
summary(lm(mpg ~ . , data = mtcars))$coefficients
summary(lm(mpg ~ . , data = mtcars))
summary(lm(mpg ~ . , data = mtcars))$coefficients
auto = mtcars[which(mtcars$am == "0"),]
manual = mtcars[which(mtcars$am == "1"),]
mean(auto$mpg)
mean(manual$mpg)
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
install.packages("GGally")
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
summary(lm(Fertility ~ . , data = swiss))
summary(lm(Fertility ~ . , data = swiss))$coefficients
?mtcars
summary(lm(mpg ~ . , data = mtcars))$coefficients
auto = mtcars[which(mtcars$am == "0"),]
manual = mtcars[which(mtcars$am == "1"),]
summary(lm(mpg ~ . , data = auto))$coefficients
manual = mtcars[which(mtcars$am == "1"),]
summary(lm(mpg ~ . , data = manual))$coefficients
mtcars
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
summary(lm(mpg ~ . , data = cars))$coefficients
cars
# Create factors for the categorial variables
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
summary(lm(mpg ~ . , data = cars))$coefficients
summary(lm(mpg ~ . , data = cars))
cars
summary(lm(mpg ~ . , data = cars))$coefficients
str(mtcars)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
levels(mtcars$am) <- c("auto", "manual")
mtcars
str(mtcars)
str(cars)
summary(lm(mpg ~ . , data = mtcars))$coefficients
summary(lm(mpg ~ . , data = cars))$coefficients
cars
str(cars)
summary(lm(mpg ~ . , data = cars))$coefficients
?summary
summary(lm(mpg ~ . , data = cars, maxsum = 7))$coefficients
summary(lm(mpg ~ . , data = cars), maxsum = 7)$coefficients
summary(lm(mpg ~ am , data = cars))
summary(lm(mpg ~ am , data = cars), maxsum = 20)
Summarize(lm(mpg ~ am , data = cars))
install.packages("FSA")
summary(cars$am)
summary(lm(mpg ~ am, data = cars))
cars
summary(lm(mpg ~ . , data = cars))$coefficients
cars$am2 <-relevel(cars$am, “Manual”)
cars$am2 <- relevel(cars$am, “Manual”)
cars$am
cars$am2 <- relevel(cars$am, “manual”)
?relevel
cars
summary(lm(mpg ~ am, data = cars))
summary(lm(mpg ~ am2, data = cars))
cars$am2 <- relevel(cars$am, “manual”)
cars$am
ls.str(cars)
cars$am2 <- relevel(cars$am, "manual")
summary(lm(mpg ~ am2, data = cars))
swiss
require(datasets); data(cars); require(GGally); require(ggplot2)
g = ggpairs(cars, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
summary(lm(mpg ~ am, data = cars))
summary(lm(mpg ~ . , data = cars))$coefficients
cars
summary(lm(Fertility ~ . , data = swiss))$coefficients
cars
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
# Create factors for the categorial variables
cars
require(datasets); data(cars); require(GGally); require(ggplot2)
g = ggpairs(cars, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
cars
cars <- mtcars
cars$am <- factor(mtcars$am, levels=c(0,1), labels=c("automatic", "manual"))
cars$cyl <- factor(mtcars$cyl)
cars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("s", "v"))
cars$gear <- factor(mtcars$gear)
cars$carb <- factor(mtcars$carb)
summary(lm(mpg ~ . , data = cars))$coefficients
summary(lm(mpg ~ am, data = cars))
